// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: MyProto.proto

#include "MyProto.pb.h"
#include "MyProto.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace MyPackage {

static const char* MyServer_method_names[] = {
  "/MyPackage.MyServer/login",
  "/MyPackage.MyServer/logout",
  "/MyPackage.MyServer/syncMessage",
  "/MyPackage.MyServer/insertImage",
  "/MyPackage.MyServer/deleteImage",
  "/MyPackage.MyServer/updateImage",
  "/MyPackage.MyServer/selectImage",
};

std::unique_ptr< MyServer::Stub> MyServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MyServer::Stub> stub(new MyServer::Stub(channel, options));
  return stub;
}

MyServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_login_(MyServer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_logout_(MyServer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_syncMessage_(MyServer_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_insertImage_(MyServer_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_deleteImage_(MyServer_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_updateImage_(MyServer_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_selectImage_(MyServer_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MyServer::Stub::login(::grpc::ClientContext* context, const ::MyPackage::UserInfo& request, ::MyPackage::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MyPackage::UserInfo, ::MyPackage::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_login_, context, request, response);
}

void MyServer::Stub::async::login(::grpc::ClientContext* context, const ::MyPackage::UserInfo* request, ::MyPackage::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MyPackage::UserInfo, ::MyPackage::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_login_, context, request, response, std::move(f));
}

void MyServer::Stub::async::login(::grpc::ClientContext* context, const ::MyPackage::UserInfo* request, ::MyPackage::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MyPackage::Empty>* MyServer::Stub::PrepareAsyncloginRaw(::grpc::ClientContext* context, const ::MyPackage::UserInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MyPackage::Empty, ::MyPackage::UserInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_login_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MyPackage::Empty>* MyServer::Stub::AsyncloginRaw(::grpc::ClientContext* context, const ::MyPackage::UserInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncloginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MyServer::Stub::logout(::grpc::ClientContext* context, const ::MyPackage::UserInfo& request, ::MyPackage::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MyPackage::UserInfo, ::MyPackage::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_logout_, context, request, response);
}

void MyServer::Stub::async::logout(::grpc::ClientContext* context, const ::MyPackage::UserInfo* request, ::MyPackage::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MyPackage::UserInfo, ::MyPackage::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_logout_, context, request, response, std::move(f));
}

void MyServer::Stub::async::logout(::grpc::ClientContext* context, const ::MyPackage::UserInfo* request, ::MyPackage::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_logout_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MyPackage::Empty>* MyServer::Stub::PrepareAsynclogoutRaw(::grpc::ClientContext* context, const ::MyPackage::UserInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MyPackage::Empty, ::MyPackage::UserInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_logout_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MyPackage::Empty>* MyServer::Stub::AsynclogoutRaw(::grpc::ClientContext* context, const ::MyPackage::UserInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynclogoutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::MyPackage::MsgInfo>* MyServer::Stub::syncMessageRaw(::grpc::ClientContext* context, const ::MyPackage::MsgInfo& request) {
  return ::grpc::internal::ClientReaderFactory< ::MyPackage::MsgInfo>::Create(channel_.get(), rpcmethod_syncMessage_, context, request);
}

void MyServer::Stub::async::syncMessage(::grpc::ClientContext* context, const ::MyPackage::MsgInfo* request, ::grpc::ClientReadReactor< ::MyPackage::MsgInfo>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::MyPackage::MsgInfo>::Create(stub_->channel_.get(), stub_->rpcmethod_syncMessage_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::MyPackage::MsgInfo>* MyServer::Stub::AsyncsyncMessageRaw(::grpc::ClientContext* context, const ::MyPackage::MsgInfo& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::MyPackage::MsgInfo>::Create(channel_.get(), cq, rpcmethod_syncMessage_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::MyPackage::MsgInfo>* MyServer::Stub::PrepareAsyncsyncMessageRaw(::grpc::ClientContext* context, const ::MyPackage::MsgInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::MyPackage::MsgInfo>::Create(channel_.get(), cq, rpcmethod_syncMessage_, context, request, false, nullptr);
}

::grpc::Status MyServer::Stub::insertImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::MyPackage::ImageInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MyPackage::ImageInfo, ::MyPackage::ImageInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_insertImage_, context, request, response);
}

void MyServer::Stub::async::insertImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MyPackage::ImageInfo, ::MyPackage::ImageInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_insertImage_, context, request, response, std::move(f));
}

void MyServer::Stub::async::insertImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_insertImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MyPackage::ImageInfo>* MyServer::Stub::PrepareAsyncinsertImageRaw(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MyPackage::ImageInfo, ::MyPackage::ImageInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_insertImage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MyPackage::ImageInfo>* MyServer::Stub::AsyncinsertImageRaw(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinsertImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MyServer::Stub::deleteImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::MyPackage::ImageInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MyPackage::ImageInfo, ::MyPackage::ImageInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_deleteImage_, context, request, response);
}

void MyServer::Stub::async::deleteImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MyPackage::ImageInfo, ::MyPackage::ImageInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deleteImage_, context, request, response, std::move(f));
}

void MyServer::Stub::async::deleteImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deleteImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MyPackage::ImageInfo>* MyServer::Stub::PrepareAsyncdeleteImageRaw(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MyPackage::ImageInfo, ::MyPackage::ImageInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_deleteImage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MyPackage::ImageInfo>* MyServer::Stub::AsyncdeleteImageRaw(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdeleteImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MyServer::Stub::updateImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::MyPackage::ImageInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MyPackage::ImageInfo, ::MyPackage::ImageInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_updateImage_, context, request, response);
}

void MyServer::Stub::async::updateImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MyPackage::ImageInfo, ::MyPackage::ImageInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_updateImage_, context, request, response, std::move(f));
}

void MyServer::Stub::async::updateImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_updateImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MyPackage::ImageInfo>* MyServer::Stub::PrepareAsyncupdateImageRaw(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MyPackage::ImageInfo, ::MyPackage::ImageInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_updateImage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MyPackage::ImageInfo>* MyServer::Stub::AsyncupdateImageRaw(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncupdateImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MyServer::Stub::selectImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::MyPackage::ImageInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MyPackage::ImageInfo, ::MyPackage::ImageInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_selectImage_, context, request, response);
}

void MyServer::Stub::async::selectImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MyPackage::ImageInfo, ::MyPackage::ImageInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_selectImage_, context, request, response, std::move(f));
}

void MyServer::Stub::async::selectImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_selectImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MyPackage::ImageInfo>* MyServer::Stub::PrepareAsyncselectImageRaw(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MyPackage::ImageInfo, ::MyPackage::ImageInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_selectImage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MyPackage::ImageInfo>* MyServer::Stub::AsyncselectImageRaw(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncselectImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

MyServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MyServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MyServer::Service, ::MyPackage::UserInfo, ::MyPackage::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MyServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MyPackage::UserInfo* req,
             ::MyPackage::Empty* resp) {
               return service->login(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MyServer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MyServer::Service, ::MyPackage::UserInfo, ::MyPackage::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MyServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MyPackage::UserInfo* req,
             ::MyPackage::Empty* resp) {
               return service->logout(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MyServer_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MyServer::Service, ::MyPackage::MsgInfo, ::MyPackage::MsgInfo>(
          [](MyServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MyPackage::MsgInfo* req,
             ::grpc::ServerWriter<::MyPackage::MsgInfo>* writer) {
               return service->syncMessage(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MyServer_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MyServer::Service, ::MyPackage::ImageInfo, ::MyPackage::ImageInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MyServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MyPackage::ImageInfo* req,
             ::MyPackage::ImageInfo* resp) {
               return service->insertImage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MyServer_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MyServer::Service, ::MyPackage::ImageInfo, ::MyPackage::ImageInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MyServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MyPackage::ImageInfo* req,
             ::MyPackage::ImageInfo* resp) {
               return service->deleteImage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MyServer_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MyServer::Service, ::MyPackage::ImageInfo, ::MyPackage::ImageInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MyServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MyPackage::ImageInfo* req,
             ::MyPackage::ImageInfo* resp) {
               return service->updateImage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MyServer_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MyServer::Service, ::MyPackage::ImageInfo, ::MyPackage::ImageInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MyServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MyPackage::ImageInfo* req,
             ::MyPackage::ImageInfo* resp) {
               return service->selectImage(ctx, req, resp);
             }, this)));
}

MyServer::Service::~Service() {
}

::grpc::Status MyServer::Service::login(::grpc::ServerContext* context, const ::MyPackage::UserInfo* request, ::MyPackage::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MyServer::Service::logout(::grpc::ServerContext* context, const ::MyPackage::UserInfo* request, ::MyPackage::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MyServer::Service::syncMessage(::grpc::ServerContext* context, const ::MyPackage::MsgInfo* request, ::grpc::ServerWriter< ::MyPackage::MsgInfo>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MyServer::Service::insertImage(::grpc::ServerContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MyServer::Service::deleteImage(::grpc::ServerContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MyServer::Service::updateImage(::grpc::ServerContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MyServer::Service::selectImage(::grpc::ServerContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace MyPackage

