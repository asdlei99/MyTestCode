// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: MyProto.proto
#ifndef GRPC_MyProto_2eproto__INCLUDED
#define GRPC_MyProto_2eproto__INCLUDED

#include "MyProto.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace MyPackage {

// 定义服务
class MyServer final {
 public:
  static constexpr char const* service_full_name() {
    return "MyPackage.MyServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 客户端登录，登陆后添加到已连接列表，开始缓存待推送消息
    virtual ::grpc::Status login(::grpc::ClientContext* context, const ::MyPackage::UserInfo& request, ::MyPackage::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::Empty>> Asynclogin(::grpc::ClientContext* context, const ::MyPackage::UserInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::Empty>>(AsyncloginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::Empty>> PrepareAsynclogin(::grpc::ClientContext* context, const ::MyPackage::UserInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::Empty>>(PrepareAsyncloginRaw(context, request, cq));
    }
    // 客户端退出，从列表移除
    virtual ::grpc::Status logout(::grpc::ClientContext* context, const ::MyPackage::UserInfo& request, ::MyPackage::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::Empty>> Asynclogout(::grpc::ClientContext* context, const ::MyPackage::UserInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::Empty>>(AsynclogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::Empty>> PrepareAsynclogout(::grpc::ClientContext* context, const ::MyPackage::UserInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::Empty>>(PrepareAsynclogoutRaw(context, request, cq));
    }
    // 消息查询，将缓存的消息全部发送给客户端
    std::unique_ptr< ::grpc::ClientReaderInterface< ::MyPackage::MsgInfo>> syncMessage(::grpc::ClientContext* context, const ::MyPackage::MsgInfo& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::MyPackage::MsgInfo>>(syncMessageRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MyPackage::MsgInfo>> AsyncsyncMessage(::grpc::ClientContext* context, const ::MyPackage::MsgInfo& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MyPackage::MsgInfo>>(AsyncsyncMessageRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MyPackage::MsgInfo>> PrepareAsyncsyncMessage(::grpc::ClientContext* context, const ::MyPackage::MsgInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MyPackage::MsgInfo>>(PrepareAsyncsyncMessageRaw(context, request, cq));
    }
    // 新增图片
    virtual ::grpc::Status insertImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::MyPackage::ImageInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::ImageInfo>> AsyncinsertImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::ImageInfo>>(AsyncinsertImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::ImageInfo>> PrepareAsyncinsertImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::ImageInfo>>(PrepareAsyncinsertImageRaw(context, request, cq));
    }
    // 删除图片
    virtual ::grpc::Status deleteImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::MyPackage::ImageInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::ImageInfo>> AsyncdeleteImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::ImageInfo>>(AsyncdeleteImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::ImageInfo>> PrepareAsyncdeleteImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::ImageInfo>>(PrepareAsyncdeleteImageRaw(context, request, cq));
    }
    // 修改图片
    virtual ::grpc::Status updateImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::MyPackage::ImageInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::ImageInfo>> AsyncupdateImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::ImageInfo>>(AsyncupdateImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::ImageInfo>> PrepareAsyncupdateImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::ImageInfo>>(PrepareAsyncupdateImageRaw(context, request, cq));
    }
    // 查询图片
    virtual ::grpc::Status selectImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::MyPackage::ImageInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::ImageInfo>> AsyncselectImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::ImageInfo>>(AsyncselectImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::ImageInfo>> PrepareAsyncselectImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::ImageInfo>>(PrepareAsyncselectImageRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // 客户端登录，登陆后添加到已连接列表，开始缓存待推送消息
      virtual void login(::grpc::ClientContext* context, const ::MyPackage::UserInfo* request, ::MyPackage::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void login(::grpc::ClientContext* context, const ::MyPackage::UserInfo* request, ::MyPackage::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 客户端退出，从列表移除
      virtual void logout(::grpc::ClientContext* context, const ::MyPackage::UserInfo* request, ::MyPackage::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void logout(::grpc::ClientContext* context, const ::MyPackage::UserInfo* request, ::MyPackage::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 消息查询，将缓存的消息全部发送给客户端
      virtual void syncMessage(::grpc::ClientContext* context, const ::MyPackage::MsgInfo* request, ::grpc::ClientReadReactor< ::MyPackage::MsgInfo>* reactor) = 0;
      // 新增图片
      virtual void insertImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void insertImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 删除图片
      virtual void deleteImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void deleteImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 修改图片
      virtual void updateImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void updateImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 查询图片
      virtual void selectImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void selectImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::Empty>* AsyncloginRaw(::grpc::ClientContext* context, const ::MyPackage::UserInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::Empty>* PrepareAsyncloginRaw(::grpc::ClientContext* context, const ::MyPackage::UserInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::Empty>* AsynclogoutRaw(::grpc::ClientContext* context, const ::MyPackage::UserInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::Empty>* PrepareAsynclogoutRaw(::grpc::ClientContext* context, const ::MyPackage::UserInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::MyPackage::MsgInfo>* syncMessageRaw(::grpc::ClientContext* context, const ::MyPackage::MsgInfo& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::MyPackage::MsgInfo>* AsyncsyncMessageRaw(::grpc::ClientContext* context, const ::MyPackage::MsgInfo& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::MyPackage::MsgInfo>* PrepareAsyncsyncMessageRaw(::grpc::ClientContext* context, const ::MyPackage::MsgInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::ImageInfo>* AsyncinsertImageRaw(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::ImageInfo>* PrepareAsyncinsertImageRaw(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::ImageInfo>* AsyncdeleteImageRaw(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::ImageInfo>* PrepareAsyncdeleteImageRaw(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::ImageInfo>* AsyncupdateImageRaw(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::ImageInfo>* PrepareAsyncupdateImageRaw(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::ImageInfo>* AsyncselectImageRaw(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MyPackage::ImageInfo>* PrepareAsyncselectImageRaw(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status login(::grpc::ClientContext* context, const ::MyPackage::UserInfo& request, ::MyPackage::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::Empty>> Asynclogin(::grpc::ClientContext* context, const ::MyPackage::UserInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::Empty>>(AsyncloginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::Empty>> PrepareAsynclogin(::grpc::ClientContext* context, const ::MyPackage::UserInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::Empty>>(PrepareAsyncloginRaw(context, request, cq));
    }
    ::grpc::Status logout(::grpc::ClientContext* context, const ::MyPackage::UserInfo& request, ::MyPackage::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::Empty>> Asynclogout(::grpc::ClientContext* context, const ::MyPackage::UserInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::Empty>>(AsynclogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::Empty>> PrepareAsynclogout(::grpc::ClientContext* context, const ::MyPackage::UserInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::Empty>>(PrepareAsynclogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::MyPackage::MsgInfo>> syncMessage(::grpc::ClientContext* context, const ::MyPackage::MsgInfo& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::MyPackage::MsgInfo>>(syncMessageRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::MyPackage::MsgInfo>> AsyncsyncMessage(::grpc::ClientContext* context, const ::MyPackage::MsgInfo& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::MyPackage::MsgInfo>>(AsyncsyncMessageRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::MyPackage::MsgInfo>> PrepareAsyncsyncMessage(::grpc::ClientContext* context, const ::MyPackage::MsgInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::MyPackage::MsgInfo>>(PrepareAsyncsyncMessageRaw(context, request, cq));
    }
    ::grpc::Status insertImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::MyPackage::ImageInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::ImageInfo>> AsyncinsertImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::ImageInfo>>(AsyncinsertImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::ImageInfo>> PrepareAsyncinsertImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::ImageInfo>>(PrepareAsyncinsertImageRaw(context, request, cq));
    }
    ::grpc::Status deleteImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::MyPackage::ImageInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::ImageInfo>> AsyncdeleteImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::ImageInfo>>(AsyncdeleteImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::ImageInfo>> PrepareAsyncdeleteImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::ImageInfo>>(PrepareAsyncdeleteImageRaw(context, request, cq));
    }
    ::grpc::Status updateImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::MyPackage::ImageInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::ImageInfo>> AsyncupdateImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::ImageInfo>>(AsyncupdateImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::ImageInfo>> PrepareAsyncupdateImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::ImageInfo>>(PrepareAsyncupdateImageRaw(context, request, cq));
    }
    ::grpc::Status selectImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::MyPackage::ImageInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::ImageInfo>> AsyncselectImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::ImageInfo>>(AsyncselectImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::ImageInfo>> PrepareAsyncselectImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyPackage::ImageInfo>>(PrepareAsyncselectImageRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void login(::grpc::ClientContext* context, const ::MyPackage::UserInfo* request, ::MyPackage::Empty* response, std::function<void(::grpc::Status)>) override;
      void login(::grpc::ClientContext* context, const ::MyPackage::UserInfo* request, ::MyPackage::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void logout(::grpc::ClientContext* context, const ::MyPackage::UserInfo* request, ::MyPackage::Empty* response, std::function<void(::grpc::Status)>) override;
      void logout(::grpc::ClientContext* context, const ::MyPackage::UserInfo* request, ::MyPackage::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void syncMessage(::grpc::ClientContext* context, const ::MyPackage::MsgInfo* request, ::grpc::ClientReadReactor< ::MyPackage::MsgInfo>* reactor) override;
      void insertImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response, std::function<void(::grpc::Status)>) override;
      void insertImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void deleteImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response, std::function<void(::grpc::Status)>) override;
      void deleteImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void updateImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response, std::function<void(::grpc::Status)>) override;
      void updateImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void selectImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response, std::function<void(::grpc::Status)>) override;
      void selectImage(::grpc::ClientContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::MyPackage::Empty>* AsyncloginRaw(::grpc::ClientContext* context, const ::MyPackage::UserInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MyPackage::Empty>* PrepareAsyncloginRaw(::grpc::ClientContext* context, const ::MyPackage::UserInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MyPackage::Empty>* AsynclogoutRaw(::grpc::ClientContext* context, const ::MyPackage::UserInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MyPackage::Empty>* PrepareAsynclogoutRaw(::grpc::ClientContext* context, const ::MyPackage::UserInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::MyPackage::MsgInfo>* syncMessageRaw(::grpc::ClientContext* context, const ::MyPackage::MsgInfo& request) override;
    ::grpc::ClientAsyncReader< ::MyPackage::MsgInfo>* AsyncsyncMessageRaw(::grpc::ClientContext* context, const ::MyPackage::MsgInfo& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::MyPackage::MsgInfo>* PrepareAsyncsyncMessageRaw(::grpc::ClientContext* context, const ::MyPackage::MsgInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MyPackage::ImageInfo>* AsyncinsertImageRaw(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MyPackage::ImageInfo>* PrepareAsyncinsertImageRaw(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MyPackage::ImageInfo>* AsyncdeleteImageRaw(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MyPackage::ImageInfo>* PrepareAsyncdeleteImageRaw(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MyPackage::ImageInfo>* AsyncupdateImageRaw(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MyPackage::ImageInfo>* PrepareAsyncupdateImageRaw(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MyPackage::ImageInfo>* AsyncselectImageRaw(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MyPackage::ImageInfo>* PrepareAsyncselectImageRaw(::grpc::ClientContext* context, const ::MyPackage::ImageInfo& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_login_;
    const ::grpc::internal::RpcMethod rpcmethod_logout_;
    const ::grpc::internal::RpcMethod rpcmethod_syncMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_insertImage_;
    const ::grpc::internal::RpcMethod rpcmethod_deleteImage_;
    const ::grpc::internal::RpcMethod rpcmethod_updateImage_;
    const ::grpc::internal::RpcMethod rpcmethod_selectImage_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 客户端登录，登陆后添加到已连接列表，开始缓存待推送消息
    virtual ::grpc::Status login(::grpc::ServerContext* context, const ::MyPackage::UserInfo* request, ::MyPackage::Empty* response);
    // 客户端退出，从列表移除
    virtual ::grpc::Status logout(::grpc::ServerContext* context, const ::MyPackage::UserInfo* request, ::MyPackage::Empty* response);
    // 消息查询，将缓存的消息全部发送给客户端
    virtual ::grpc::Status syncMessage(::grpc::ServerContext* context, const ::MyPackage::MsgInfo* request, ::grpc::ServerWriter< ::MyPackage::MsgInfo>* writer);
    // 新增图片
    virtual ::grpc::Status insertImage(::grpc::ServerContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response);
    // 删除图片
    virtual ::grpc::Status deleteImage(::grpc::ServerContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response);
    // 修改图片
    virtual ::grpc::Status updateImage(::grpc::ServerContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response);
    // 查询图片
    virtual ::grpc::Status selectImage(::grpc::ServerContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_login() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::MyPackage::UserInfo* /*request*/, ::MyPackage::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlogin(::grpc::ServerContext* context, ::MyPackage::UserInfo* request, ::grpc::ServerAsyncResponseWriter< ::MyPackage::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_logout() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logout(::grpc::ServerContext* /*context*/, const ::MyPackage::UserInfo* /*request*/, ::MyPackage::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlogout(::grpc::ServerContext* context, ::MyPackage::UserInfo* request, ::grpc::ServerAsyncResponseWriter< ::MyPackage::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_syncMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_syncMessage() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_syncMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status syncMessage(::grpc::ServerContext* /*context*/, const ::MyPackage::MsgInfo* /*request*/, ::grpc::ServerWriter< ::MyPackage::MsgInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsyncMessage(::grpc::ServerContext* context, ::MyPackage::MsgInfo* request, ::grpc::ServerAsyncWriter< ::MyPackage::MsgInfo>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_insertImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_insertImage() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_insertImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status insertImage(::grpc::ServerContext* /*context*/, const ::MyPackage::ImageInfo* /*request*/, ::MyPackage::ImageInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestinsertImage(::grpc::ServerContext* context, ::MyPackage::ImageInfo* request, ::grpc::ServerAsyncResponseWriter< ::MyPackage::ImageInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_deleteImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_deleteImage() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_deleteImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteImage(::grpc::ServerContext* /*context*/, const ::MyPackage::ImageInfo* /*request*/, ::MyPackage::ImageInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteImage(::grpc::ServerContext* context, ::MyPackage::ImageInfo* request, ::grpc::ServerAsyncResponseWriter< ::MyPackage::ImageInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_updateImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_updateImage() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_updateImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateImage(::grpc::ServerContext* /*context*/, const ::MyPackage::ImageInfo* /*request*/, ::MyPackage::ImageInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdateImage(::grpc::ServerContext* context, ::MyPackage::ImageInfo* request, ::grpc::ServerAsyncResponseWriter< ::MyPackage::ImageInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_selectImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_selectImage() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_selectImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status selectImage(::grpc::ServerContext* /*context*/, const ::MyPackage::ImageInfo* /*request*/, ::MyPackage::ImageInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestselectImage(::grpc::ServerContext* context, ::MyPackage::ImageInfo* request, ::grpc::ServerAsyncResponseWriter< ::MyPackage::ImageInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_login<WithAsyncMethod_logout<WithAsyncMethod_syncMessage<WithAsyncMethod_insertImage<WithAsyncMethod_deleteImage<WithAsyncMethod_updateImage<WithAsyncMethod_selectImage<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_login() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::MyPackage::UserInfo, ::MyPackage::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MyPackage::UserInfo* request, ::MyPackage::Empty* response) { return this->login(context, request, response); }));}
    void SetMessageAllocatorFor_login(
        ::grpc::MessageAllocator< ::MyPackage::UserInfo, ::MyPackage::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MyPackage::UserInfo, ::MyPackage::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::MyPackage::UserInfo* /*request*/, ::MyPackage::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* login(
      ::grpc::CallbackServerContext* /*context*/, const ::MyPackage::UserInfo* /*request*/, ::MyPackage::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_logout() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::MyPackage::UserInfo, ::MyPackage::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MyPackage::UserInfo* request, ::MyPackage::Empty* response) { return this->logout(context, request, response); }));}
    void SetMessageAllocatorFor_logout(
        ::grpc::MessageAllocator< ::MyPackage::UserInfo, ::MyPackage::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MyPackage::UserInfo, ::MyPackage::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logout(::grpc::ServerContext* /*context*/, const ::MyPackage::UserInfo* /*request*/, ::MyPackage::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* logout(
      ::grpc::CallbackServerContext* /*context*/, const ::MyPackage::UserInfo* /*request*/, ::MyPackage::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_syncMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_syncMessage() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::MyPackage::MsgInfo, ::MyPackage::MsgInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MyPackage::MsgInfo* request) { return this->syncMessage(context, request); }));
    }
    ~WithCallbackMethod_syncMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status syncMessage(::grpc::ServerContext* /*context*/, const ::MyPackage::MsgInfo* /*request*/, ::grpc::ServerWriter< ::MyPackage::MsgInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::MyPackage::MsgInfo>* syncMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::MyPackage::MsgInfo* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_insertImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_insertImage() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::MyPackage::ImageInfo, ::MyPackage::ImageInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response) { return this->insertImage(context, request, response); }));}
    void SetMessageAllocatorFor_insertImage(
        ::grpc::MessageAllocator< ::MyPackage::ImageInfo, ::MyPackage::ImageInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MyPackage::ImageInfo, ::MyPackage::ImageInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_insertImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status insertImage(::grpc::ServerContext* /*context*/, const ::MyPackage::ImageInfo* /*request*/, ::MyPackage::ImageInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* insertImage(
      ::grpc::CallbackServerContext* /*context*/, const ::MyPackage::ImageInfo* /*request*/, ::MyPackage::ImageInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_deleteImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_deleteImage() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::MyPackage::ImageInfo, ::MyPackage::ImageInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response) { return this->deleteImage(context, request, response); }));}
    void SetMessageAllocatorFor_deleteImage(
        ::grpc::MessageAllocator< ::MyPackage::ImageInfo, ::MyPackage::ImageInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MyPackage::ImageInfo, ::MyPackage::ImageInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_deleteImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteImage(::grpc::ServerContext* /*context*/, const ::MyPackage::ImageInfo* /*request*/, ::MyPackage::ImageInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deleteImage(
      ::grpc::CallbackServerContext* /*context*/, const ::MyPackage::ImageInfo* /*request*/, ::MyPackage::ImageInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_updateImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_updateImage() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::MyPackage::ImageInfo, ::MyPackage::ImageInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response) { return this->updateImage(context, request, response); }));}
    void SetMessageAllocatorFor_updateImage(
        ::grpc::MessageAllocator< ::MyPackage::ImageInfo, ::MyPackage::ImageInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MyPackage::ImageInfo, ::MyPackage::ImageInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_updateImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateImage(::grpc::ServerContext* /*context*/, const ::MyPackage::ImageInfo* /*request*/, ::MyPackage::ImageInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* updateImage(
      ::grpc::CallbackServerContext* /*context*/, const ::MyPackage::ImageInfo* /*request*/, ::MyPackage::ImageInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_selectImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_selectImage() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::MyPackage::ImageInfo, ::MyPackage::ImageInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::MyPackage::ImageInfo* request, ::MyPackage::ImageInfo* response) { return this->selectImage(context, request, response); }));}
    void SetMessageAllocatorFor_selectImage(
        ::grpc::MessageAllocator< ::MyPackage::ImageInfo, ::MyPackage::ImageInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::MyPackage::ImageInfo, ::MyPackage::ImageInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_selectImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status selectImage(::grpc::ServerContext* /*context*/, const ::MyPackage::ImageInfo* /*request*/, ::MyPackage::ImageInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* selectImage(
      ::grpc::CallbackServerContext* /*context*/, const ::MyPackage::ImageInfo* /*request*/, ::MyPackage::ImageInfo* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_login<WithCallbackMethod_logout<WithCallbackMethod_syncMessage<WithCallbackMethod_insertImage<WithCallbackMethod_deleteImage<WithCallbackMethod_updateImage<WithCallbackMethod_selectImage<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_login() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::MyPackage::UserInfo* /*request*/, ::MyPackage::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_logout() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logout(::grpc::ServerContext* /*context*/, const ::MyPackage::UserInfo* /*request*/, ::MyPackage::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_syncMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_syncMessage() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_syncMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status syncMessage(::grpc::ServerContext* /*context*/, const ::MyPackage::MsgInfo* /*request*/, ::grpc::ServerWriter< ::MyPackage::MsgInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_insertImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_insertImage() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_insertImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status insertImage(::grpc::ServerContext* /*context*/, const ::MyPackage::ImageInfo* /*request*/, ::MyPackage::ImageInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_deleteImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_deleteImage() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_deleteImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteImage(::grpc::ServerContext* /*context*/, const ::MyPackage::ImageInfo* /*request*/, ::MyPackage::ImageInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_updateImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_updateImage() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_updateImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateImage(::grpc::ServerContext* /*context*/, const ::MyPackage::ImageInfo* /*request*/, ::MyPackage::ImageInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_selectImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_selectImage() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_selectImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status selectImage(::grpc::ServerContext* /*context*/, const ::MyPackage::ImageInfo* /*request*/, ::MyPackage::ImageInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_login() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::MyPackage::UserInfo* /*request*/, ::MyPackage::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_logout() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logout(::grpc::ServerContext* /*context*/, const ::MyPackage::UserInfo* /*request*/, ::MyPackage::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlogout(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_syncMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_syncMessage() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_syncMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status syncMessage(::grpc::ServerContext* /*context*/, const ::MyPackage::MsgInfo* /*request*/, ::grpc::ServerWriter< ::MyPackage::MsgInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsyncMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_insertImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_insertImage() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_insertImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status insertImage(::grpc::ServerContext* /*context*/, const ::MyPackage::ImageInfo* /*request*/, ::MyPackage::ImageInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestinsertImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_deleteImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_deleteImage() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_deleteImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteImage(::grpc::ServerContext* /*context*/, const ::MyPackage::ImageInfo* /*request*/, ::MyPackage::ImageInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_updateImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_updateImage() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_updateImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateImage(::grpc::ServerContext* /*context*/, const ::MyPackage::ImageInfo* /*request*/, ::MyPackage::ImageInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdateImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_selectImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_selectImage() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_selectImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status selectImage(::grpc::ServerContext* /*context*/, const ::MyPackage::ImageInfo* /*request*/, ::MyPackage::ImageInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestselectImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_login() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->login(context, request, response); }));
    }
    ~WithRawCallbackMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::MyPackage::UserInfo* /*request*/, ::MyPackage::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* login(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_logout() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->logout(context, request, response); }));
    }
    ~WithRawCallbackMethod_logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logout(::grpc::ServerContext* /*context*/, const ::MyPackage::UserInfo* /*request*/, ::MyPackage::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* logout(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_syncMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_syncMessage() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->syncMessage(context, request); }));
    }
    ~WithRawCallbackMethod_syncMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status syncMessage(::grpc::ServerContext* /*context*/, const ::MyPackage::MsgInfo* /*request*/, ::grpc::ServerWriter< ::MyPackage::MsgInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* syncMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_insertImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_insertImage() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->insertImage(context, request, response); }));
    }
    ~WithRawCallbackMethod_insertImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status insertImage(::grpc::ServerContext* /*context*/, const ::MyPackage::ImageInfo* /*request*/, ::MyPackage::ImageInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* insertImage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_deleteImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_deleteImage() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->deleteImage(context, request, response); }));
    }
    ~WithRawCallbackMethod_deleteImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteImage(::grpc::ServerContext* /*context*/, const ::MyPackage::ImageInfo* /*request*/, ::MyPackage::ImageInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deleteImage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_updateImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_updateImage() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->updateImage(context, request, response); }));
    }
    ~WithRawCallbackMethod_updateImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateImage(::grpc::ServerContext* /*context*/, const ::MyPackage::ImageInfo* /*request*/, ::MyPackage::ImageInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* updateImage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_selectImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_selectImage() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->selectImage(context, request, response); }));
    }
    ~WithRawCallbackMethod_selectImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status selectImage(::grpc::ServerContext* /*context*/, const ::MyPackage::ImageInfo* /*request*/, ::MyPackage::ImageInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* selectImage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_login() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MyPackage::UserInfo, ::MyPackage::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MyPackage::UserInfo, ::MyPackage::Empty>* streamer) {
                       return this->Streamedlogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::MyPackage::UserInfo* /*request*/, ::MyPackage::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedlogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MyPackage::UserInfo,::MyPackage::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_logout() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MyPackage::UserInfo, ::MyPackage::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MyPackage::UserInfo, ::MyPackage::Empty>* streamer) {
                       return this->Streamedlogout(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status logout(::grpc::ServerContext* /*context*/, const ::MyPackage::UserInfo* /*request*/, ::MyPackage::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedlogout(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MyPackage::UserInfo,::MyPackage::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_insertImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_insertImage() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MyPackage::ImageInfo, ::MyPackage::ImageInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MyPackage::ImageInfo, ::MyPackage::ImageInfo>* streamer) {
                       return this->StreamedinsertImage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_insertImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status insertImage(::grpc::ServerContext* /*context*/, const ::MyPackage::ImageInfo* /*request*/, ::MyPackage::ImageInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedinsertImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MyPackage::ImageInfo,::MyPackage::ImageInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_deleteImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_deleteImage() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MyPackage::ImageInfo, ::MyPackage::ImageInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MyPackage::ImageInfo, ::MyPackage::ImageInfo>* streamer) {
                       return this->StreameddeleteImage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_deleteImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status deleteImage(::grpc::ServerContext* /*context*/, const ::MyPackage::ImageInfo* /*request*/, ::MyPackage::ImageInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddeleteImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MyPackage::ImageInfo,::MyPackage::ImageInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_updateImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_updateImage() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MyPackage::ImageInfo, ::MyPackage::ImageInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MyPackage::ImageInfo, ::MyPackage::ImageInfo>* streamer) {
                       return this->StreamedupdateImage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_updateImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status updateImage(::grpc::ServerContext* /*context*/, const ::MyPackage::ImageInfo* /*request*/, ::MyPackage::ImageInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedupdateImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MyPackage::ImageInfo,::MyPackage::ImageInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_selectImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_selectImage() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MyPackage::ImageInfo, ::MyPackage::ImageInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::MyPackage::ImageInfo, ::MyPackage::ImageInfo>* streamer) {
                       return this->StreamedselectImage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_selectImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status selectImage(::grpc::ServerContext* /*context*/, const ::MyPackage::ImageInfo* /*request*/, ::MyPackage::ImageInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedselectImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MyPackage::ImageInfo,::MyPackage::ImageInfo>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_login<WithStreamedUnaryMethod_logout<WithStreamedUnaryMethod_insertImage<WithStreamedUnaryMethod_deleteImage<WithStreamedUnaryMethod_updateImage<WithStreamedUnaryMethod_selectImage<Service > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_syncMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_syncMessage() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::MyPackage::MsgInfo, ::MyPackage::MsgInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::MyPackage::MsgInfo, ::MyPackage::MsgInfo>* streamer) {
                       return this->StreamedsyncMessage(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_syncMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status syncMessage(::grpc::ServerContext* /*context*/, const ::MyPackage::MsgInfo* /*request*/, ::grpc::ServerWriter< ::MyPackage::MsgInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedsyncMessage(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::MyPackage::MsgInfo,::MyPackage::MsgInfo>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_syncMessage<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_login<WithStreamedUnaryMethod_logout<WithSplitStreamingMethod_syncMessage<WithStreamedUnaryMethod_insertImage<WithStreamedUnaryMethod_deleteImage<WithStreamedUnaryMethod_updateImage<WithStreamedUnaryMethod_selectImage<Service > > > > > > > StreamedService;
};

}  // namespace MyPackage


#endif  // GRPC_MyProto_2eproto__INCLUDED
